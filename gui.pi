import tkinter as tk
from tkinter import ttk
from tkinter import filedialog

from datetime import datetime
import os
from os.path import join, islink
from PIL import ImageTk, Image, ImageOps
import shutil
import exifread
import ffmpeg
import magic

source_root = os.path.abspath('P:/')
destination_root = os.path.abspath('P:/')
include_subdirectories = False
force = False
test_only = True


def print_tags(tags):
    """Display the exif tags."""
    for tag in tags.keys():
        if tag not in ('JPEGThumbnail', 'TIFFThumbnail', 'Filename', 'EXIF MakerNote'):
            print ("Key: ", tag, " value: ", tags[tag])



#### File actions



def copy(file, destination_root):
    source = file.path
    destination = file.get_destination(destination_root)
    if os.path.exists(destination) and not force:
        print (f'Skipping {destination} as file already exists, use --force to force overwrite')
        return
    print(f'copy from {source} to {destination}')
    if not test_only:
        shutil.copy(source, destination)

def move(file, destination_root):
    source = file.path
    destination = file.get_destination(destination_root)
    if os.path.exists(destination) and not force:
        print (f'Skipping {destination} as file already exists, use --force to force overwrite')
        return
    print(f'move from {source} to {destination}')
    if not test_only:
        shutil.move(source, destination)

def link_to(file, destination_root):
    source = file.path
    destination = file.get_destination(destination_root)
    if os.path.exists(destination) and not force:
        print (f'Skipping {destination} as file already exists, use --force to force overwrite')
        return
    print(f'move from {source} to {destination}')
    if not test_only:
        shutil.move(source, destination)
    print(f'link from {source} to {destination}')
    if not test_only:
        os.symlink(destination, source)

def link_from(file, destination_root):
    source = file.path
    destination = file.get_destination(destination_root)
    if os.path.exists(destination) and not force:
        print (f'Skipping {destination} as file already exists, use --force to force overwrite')
        return
    print(f'link from {destination} to {source}')
    if not test_only:
        os.symlink(source, destination)


action = move


def show_picture(path):
    root = tk.Toplevel()
    image = Image.open(path)
    # Rotate the image if orientation specified
    image = ImageOps.exif_transpose(image)
    width, height = image.size
    image = ImageTk.PhotoImage(image)
    canvas = tk.Canvas(root, width=width, height=height)
    root.image= image
    canvas.create_image(0, 0, image=image, anchor=tk.NW)
    canvas.pack(side = "bottom", fill = "both", expand = "yes")


class Managed_Path:
    def __init__(self, path):
        self.path = path


class Managed_Directory(Managed_Path):
    def __init__(self, path):
        super().__init__(path)
        self.content = {}
        self.status = 'unprocessed'

    def set_action(self, action):
        self.action = action


class Managed_File(Managed_Path):
    def __init__(self, path):
        super().__init__(path)
        self.status = 'unknown'
        self.action = 'None'
        self.type = magic.from_file(path, mime=True)
        self.date = datetime.now()
        #self.get_date()

    def __str__(self):
        return f'{self.path} {self.type} {self.date:%m/%d/%Y}'

    def set_action(self, action):
        self.action = action


    def get_date(self):
        # Default to file creation date
        self.date = datetime.fromtimestamp(os.path.getctime(self.path))
        
        if self.type == 'video/mp4':
            try:
                streams = ffmpeg.probe(self.path)["streams"]
                for stream in streams:
                    date_str = stream["tags"].get('creation_time', '0000-00-00T00:00:00.000000Z')
                    self.status = 'OK'
                    self.date = datetime.fromisoformat(date_str)
                    return
            except OSError:
                self.status = 'OS Error reading tags'
                print ('Ignoring OSError')

        if self.type.startswith('image'):
            with open(self.path, 'rb') as f:
                try:
                    tags = exifread.process_file(f)
                except OSError:
                    self.status = 'OS Error reading tags'
                    print ('Ignoring OSError')
            if 'Image DateTime' in tags and str(tags['Image DateTime']) != '0000:00:00 00:00:00':
                date_str = str(tags['Image DateTime'])
                self.date = datetime.strptime(date_str, '%Y:%m:%d %H:%M:%S')
                self.status = 'OK'
                return
            elif 'EXIF DateTimeOriginal' in tags and str(tags['EXIF DateTimeOriginal']) != '0000:00:00 00:00:00':
                date_str = str(tags['EXIF DateTimeOriginal'])
                self.date = datetime.strptime(date_str, '%Y:%m:%d %H:%M:%S')
                self.status = 'OK'
                return

            self.status = 'No date tag on image'
            return
        
        print (f'{self.path} ({self.type}) has no date tag, using file creation date')
        self.status = 'Unrecognised file type'

    def get_action(self):
        match self.action:
            case 'None':
                return 'None'

        return f'Unknown action: {self.action}'

    def get_destination_dir(self, destination_root):
        path_suffix = os.path.join(f'{self.date:%Y}', f'{self.date:%Y-%m}', f'{self.date:%Y-%m-%d}')
        path = os.path.abspath(os.path.join(destination_root, path_suffix))
        if not os.path.exists(path):
            print (f'Making destination path: {path}')
            if not test_only:
                os.makedirs(path)
        return path

    def get_destination(self, destination_root):
        basename = os.path.basename(self.path)
        directory = self.get_destination_dir(destination_root)
        return os.path.join(directory, basename)

    def check(self):
        if not os.path.exists(self.path):
            return f'Source missing!'
        
        if os.path.exists(self.get_destination(destination_root)):
            return f'Destination exists!'

        return self.status


# Get the list of files starting from the present directory
all_files = {}


class Photo_Manager:
    def __init__(self, treeview):
        self.treeview = treeview
        self.map = {}

    def add_path(self, path, root=None):
        #update(f'Adding {path}')
        if root == None:
            root = Managed_Directory(path)
        files = [os.path.abspath(os.path.join(path, file)) for file in os.listdir(path)]

        iid = self.treeview.insert('', tk.END, text=path)
        self.map[iid] = root
        self.treeview.winfo_toplevel().update()

        for directory in [file for file in files if os.path.isdir(file)]:
            managed_directory = Managed_Directory(directory)
            if include_subdirectories:
                self.add_files(directory, managed_directory, update, iid)
            if 'directory' in root.content:
                root.content['directory'].append(managed_directory)
            else:  
                root.content['directory'] = [managed_directory]
            child_iid = self.treeview.insert(iid, tk.END, text=os.path.basename(managed_directory.path), tags='ignore')
            self.map[child_iid] = managed_directory
            dummy = self.treeview.insert(child_iid, tk.END, text='loading directory', tags='ignore')
            self.treeview.winfo_toplevel().update()


        for file in [file for file in files if os.path.isfile(file)]:
            managed = Managed_File(file)
            if managed.type in root.content:
                root.content[managed.type].append(managed)
            else:  
                root.content[managed.type] = [managed]
            status = managed.check()
            match status:
                case 'OK':
                    tag = 'ok'
                case 'No date tag on image':
                    tag = 'warning'
                case _:
                    tag = 'error'
            child_iid = self.treeview.insert(iid, tk.END, text=os.path.basename(managed.path), tags=tag,
                            values=(f'{managed.date:%Y-%m-%d}', managed.get_action(), managed.status))
            self.map[child_iid] = managed
            self.treeview.winfo_toplevel().update()

        self.treeview.item(iid, open=True)

        return root

    def remove_tag(self, iid, tag ):

        """ Removes the given tag from the given item, while preserving other tags it may have. """

        current_tags = list( self.treeview.item(iid, 'tags' ) )
        if tag in current_tags:
            current_tags.remove( tag )
            self.treeview.item( iid, tags=current_tags )


    def expand(self, item, iid):
        #update(f'Updating {item.path}')
        
        self.remove_tag(iid, 'ignore')
        files = [os.path.abspath(os.path.join(item.path, file)) for file in os.listdir(item.path)]

        for child in self.treeview.get_children(iid):
            self.treeview.delete(child)

        self.treeview.winfo_toplevel().update()

        for directory in [file for file in files if os.path.isdir(file)]:
            managed_directory = Managed_Directory(directory)
            if include_subdirectories:
                self.add_files(directory, managed_directory, iid)
            if 'directory' in item.content:
                item.content['directory'].append(managed_directory)
            else:  
                item.content['directory'] = [managed_directory]
            child_iid = self.treeview.insert(iid, tk.END, text=os.path.basename(managed_directory.path), tags='ignore')
            self.map[child_iid] = managed_directory
            dummy = self.treeview.insert(child_iid, tk.END, text='loading directory', tags='ignore')
            self.treeview.winfo_toplevel().update()


        for file in [file for file in files if os.path.isfile(file)]:
            managed = Managed_File(file)
            if managed.type in item.content:
                item.content[managed.type].append(managed)
            else:  
                item.content[managed.type] = [managed]
            status = managed.check()
            match status:
                case 'OK':
                    tag = 'ok'
                case 'No date tag on image':
                    tag = 'warning'
                case _:
                    tag = 'error'
            child_iid = self.treeview.insert(iid, tk.END, text=os.path.basename(managed.path), tags=tag,
                            values=(f'{managed.date:%Y-%m-%d}', managed.get_action(), managed.status))
            self.map[child_iid] = managed
            self.treeview.winfo_toplevel().update()
        self.treeview.item(iid, open=True)


    def add_files(self, root, parent, update, parent_iid=''):
        if parent == None:
            parent = Managed_Directory(root)
        files = [os.path.abspath(os.path.join(root, file)) for file in os.listdir(root)]

        update(f'Processing {root}')
        path = parent.path
        iid = self.treeview.insert(parent_iid, tk.END, text=path)
        self.treeview.winfo_toplevel().update()

        for directory in [file for file in files if os.path.isdir(file)]:
            managed_directory = Managed_Directory(directory)
            if include_subdirectories:
                self.add_files(directory, managed_directory, update, iid)
            if 'directory' in parent.content:
                parent.content['directory'].append(managed_directory)
            else:  
                parent.content['directory'] = [managed_directory]
            child_iid = self.treeview.insert(iid, tk.END, text=os.path.basename(managed_directory.path), tags='ignore')
            dummy = self.treeview.insert(child_iid, tk.END, text='loading directory', tags='ignore')
            self.treeview.winfo_toplevel().update()


        for file in [file for file in files if os.path.isfile(file)]:
            managed = Managed_File(file)
            if managed.type in parent.content:
                parent.content[managed.type].append(managed)
            else:  
                parent.content[managed.type] = [managed]
            status = managed.check()
            match status:
                case 'OK':
                    tag = 'ok'
                case 'No date tag on image':
                    tag = 'warning'
                case _:
                    tag = 'error'
            self.treeview.insert(iid, tk.END, text=os.path.basename(managed.path), tags=tag,
                            values=(f'{managed.date:%Y-%m-%d}', managed.get_action(), managed.status))
            self.treeview.winfo_toplevel().update()

        return parent


def populate_tree(tree, source, parent=''):
    path = source.path if parent == '' else os.path.basename(source.path)
    iid = tree.insert(parent, tk.END, text=path)
    
    if 'directory' in source.content:
        for item in source.content['directory']:
            if item.status == 'processed':
                populate_tree(tree, item, iid)
            else:
                dir_iid = tree.insert(iid, tk.END, text=os.path.basename(item.path), tags='ignore')
                # Add a dummy entry to allow the directory to be opened
                dummy = tree.insert(dir_iid, tk.END, text='processing directory', tags='ignore')

    types = source.content.keys()
    image_types = [type for type in types if type.startswith('image')]

    for image_type in image_types:
        for item in source.content[image_type]:
            status = item.check()
            match status:
                case 'OK':
                    tag = 'ok'
                case 'No date tag on image':
                    tag = 'warning'
                case _:
                    tag = 'error'
 
            tree.insert(iid, tk.END, text=os.path.basename(item.path), tags=tag,
                        values=(f'{item.date:%Y-%m-%d}', item.get_action(), item.status))


def get_full_path(item_iid, treeview):
    path = treeview.item(item_iid, 'text')
    parent_iid = treeview.parent(item_iid)
    path = os.path.join(treeview.item(parent_iid, 'text'), path)
    return path


def main():
    all_files = {}
    window = tk.Tk()
    window.title('Photo Manager')

    source_frame = tk.Frame(window)
    source_frame.pack(fill=tk.X)
    label1 = ttk.Label(source_frame, text="Source:", font=("Helvetica", 16))
    label1.pack(side=tk.LEFT, fill=tk.BOTH)

    status = ttk.Label(window, text="Tkinter", font=("Helvetica", 16))

    def update(text):
        status['text'] = text
        window.update()

    button1 = ttk.Button(source_frame, text=source_root)
    button1.pack(side=tk.LEFT, fill=tk.X, expand=1)

    def change_source_directory():
        global source_root
        source_root = filedialog.askdirectory()
        button1['text'] = source_root
        window.update()

    button1['command'] =change_source_directory

    columns = ('source', 'action', 'destination')
    style = ttk.Style()
    style.theme_use('clam')
    style.configure(".", font=(None, 14))
    style.configure("Treeview", rowheight=30)
    style.configure("Treeview.Heading", font=(None, 14))
    treeview = ttk.Treeview(columns=columns)
    
    manager = Photo_Manager(treeview)

    def add_source_directory():
        global include_subdirectories
        include_subdirectories = False
        update('updating')
        print(source_root)
        all_files = manager.add_path(os.path.abspath(source_root))
        #populate_tree(treeview, all_files)
        update('Ready')

    add_source_button = ttk.Button(source_frame, text='Add', command=add_source_directory)
    add_source_button.pack(side=tk.LEFT)

    def add_width_childen():
        global include_subdirectories
        include_subdirectories = True
        update('updating')
        print(source_root)
        all_files = manager.add_files(os.path.abspath(source_root), Managed_Directory(source_root), update)
        #populate_tree(treeview, all_files)
        update('Ready')

    add_source_button = ttk.Button(source_frame, text='Add All', command=add_width_childen)
    add_source_button.pack(side=tk.LEFT)
    
    destination_frame = tk.Frame(window)
    destination_frame.pack(fill=tk.X)
    label2 = ttk.Label(destination_frame, text="Destination:", font=("Helvetica", 16))
    label2.pack(side=tk.LEFT, fill=tk.BOTH)

    def update(text):
        status['text'] = text
        window.update()

    button2 = ttk.Button(destination_frame, text=destination_root)
    button2.pack(side=tk.LEFT, fill=tk.X, expand=1)

    def change_destination_directory():
        global destination_root
        source_root = filedialog.askdirectory()
        button1['text'] = source_root
        window.update()

    button2['command'] = change_source_directory


    def double_click(event):
        item = treeview.identify('item', event.x, event.y)
        show_picture(get_full_path(item, treeview))

    def update_content(event):
        x = treeview.winfo_pointerx() - treeview.winfo_rootx()
        y = treeview.winfo_pointery() - treeview.winfo_rooty()
        print (x, y)
        iid = treeview.identify('item', x, y)
        item = manager.map[iid]
        manager.expand(item, iid)

    def update_selection(action):
        for item in treeview.selection():
            print (manager.map[item])
            #item.set_action(action)

    def ignore_callback(event):
        global move
        update_selection('None')

    def move_callback():
        global move
        update_selection(move)

    def copy_callback():
        global copy
        update_selection(copy)

    def link_to_callback():
        global link_to
        update_selection(link_to)

    def link_from_callback():
        global link_from
        update_selection(link_from)

    treeview.heading('#0', text='Source')
    treeview.heading('#1', text='Date')
    treeview.heading('#2', text='Action')
    treeview.heading('#3', text='Status')
    treeview.tag_configure('ignore', foreground='grey')
    treeview.tag_configure('unknonw', foreground='lightblue')
    treeview.tag_configure('error', foreground='red')
    treeview.tag_configure('warning', foreground='orange')
    treeview.bind("<Double-1>", double_click)
    treeview.bind('<<TreeviewOpen>>', update_content)

    #treeview.column('#0', width=100, anchor=tk.W)
    treeview.column('#1', width=100, anchor=tk.CENTER)
    treeview.column('#2', width=400, anchor=tk.W)

    treeview.pack(fill=tk.BOTH, expand=1)

    button_frame = tk.Frame(window)
    button_frame.pack(fill=tk.X)
    ignore = ttk.Button(button_frame, text="Ignore", command=ignore_callback)
    ignore.pack(side=tk.LEFT, fill=tk.BOTH, expand=1)
    move = ttk.Button(button_frame, text="Move", command=move_callback)
    move.pack(side=tk.LEFT, fill=tk.BOTH, expand=1)
    copy = ttk.Button(button_frame, text="Copy", command=move_callback)
    copy.pack(side=tk.LEFT, fill=tk.BOTH, expand=1)
    link_from = ttk.Button(button_frame, text="Link From", command=move_callback)
    link_from.pack(side=tk.LEFT, fill=tk.BOTH, expand=1)
    link_to = ttk.Button(button_frame, text="Link To", command=move_callback)
    link_to.pack(side=tk.LEFT, fill=tk.BOTH, expand=1)
    
    status.pack(fill=tk.BOTH)

    update('Add sources')

    window.mainloop()


if __name__ == '__main__':
    main()
